generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int      @id @default(autoincrement())
  userId            Int      @map("user_id")
  type              String   @map("type")
  provider          String   @map("provider")
  providerAccountId String   @map("provider_account_id")
  refreshToken      String?  @map("refresh_token")
  accessToken       String?  @map("access_token")
  expiresAt         Int?     @map("expires_at")
  scope             String?  @map("scope")
  /// 创建时间
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamptz()
  /// 更新时间
  updatedAt         DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  /// 主键
  id            Int       @id @default(autoincrement())
  /// UID
  uid           String    @default("") @map("uid")
  /// 头像
  avatar        String?   @map("avatar")
  /// 用户名
  name          String?   @map("name")
  /// 邮箱
  email         String?   @unique @map("email")
  /// 邮箱是否已验证
  emailVerified DateTime? @map("email_verified") @db.Timestamptz()
  /// 密码
  password      String?   @map("password")
  /// 界面语言设置
  uiLocale      String?   @default("") @map("ui_locale")
  /// 输出语言设置
  outputLocale  String?   @default("") @map("output_locale")
  /// 创建时间
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  /// 更新时间
  updatedAt     DateTime  @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("users")
}

// Conversation
model Conversation {
  /// Primary key
  id              Int      @id @default(autoincrement())
  /// Conversation ID
  convId          String   @unique @default("") @map("conv_id")
  /// UID
  uid             String   @default("") @map("uid")
  /// Conversation title
  title           String   @map("title")
  /// Last message content
  lastMessage     String   @default("") @map("last_message")
  /// Message count
  messageCount    Int      @default(0) @map("message_count")
  /// Conversation origin page
  origin          String   @default("") @map("origin")
  // Conversation origin page url
  originPageUrl   String   @default("") @map("origin_page_url")
  /// Conversation source page title
  originPageTitle String   @default("") @map("origin_page_title")
  /// Create timestamp
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz()
  /// Update timestamp
  updatedAt       DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@index([uid, updatedAt])
  @@map("conversations")
}

/// Conversation messages
model ChatMessage {
  /// Primary key
  id                    Int         @id @default(autoincrement())
  /// Message id
  msgId                 String      @default("") @map("msg_id")
  /// Conversation ID
  convId                String      @default("") @map("conv_id")
  /// Message type
  type                  MessageType @map("type")
  /// UID
  uid                   String      @default("") @map("uid")
  /// Message content
  content               String      @map("content")
  /// Skill metadata
  skillMeta             String      @default("{}") @map("skill_meta")
  /// Logs output
  logs                  String      @default("[]") @map("logs")
  /// Structured data output (JSON)
  structuredData        String      @default("{}") @map("structured_data")
  /// Locale setting
  locale                String?     @default("") @map("locale")
  /// Create timestamp
  createdAt             DateTime    @default(now()) @map("created_at") @db.Timestamptz()
  /// Update timestamp
  updatedAt             DateTime    @updatedAt @map("updated_at") @db.Timestamptz()
  /// 会话选中 Weblink 配置，未来可能会变，先使用 string 保存
  selectedWeblinkConfig String?     @map("selected_weblink_config")

  @@index([convId, updatedAt])
  @@map("chat_messages")
}

/// 知识库资源
model Resource {
  /// 主键
  id              BigInt       @id @default(autoincrement())
  /// 资源项 id
  resourceId      String       @unique @map("resource_id")
  /// 资源类型
  resourceType    ResourceType @map("resource_type")
  /// UID
  uid             String       @default("") @map("uid")
  /// Collection ID
  collectionId    String       @default("") @map("collection_id")
  /// 字数
  wordCount       Int          @default(0) @map("word_count")
  /// Content of resource
  content         String       @default("") @map("content")
  /// Yjs 状态数据存储 key
  stateStorageKey String       @default("") @map("state_storage_key")
  /// 是否公开
  isPublic        Boolean      @default(false) @map("is_public")
  /// 是否只读
  readOnly        Boolean      @default(false) @map("read_only")
  /// 索引状态
  indexStatus     IndexStatus  @default(init) @map("index_status")
  /// 标题
  title           String       @map("title")
  /// 资源元数据
  meta            String       @map("meta")
  /// 创建时间
  createdAt       DateTime     @default(now()) @map("created_at") @db.Timestamptz()
  /// 更新时间
  updatedAt       DateTime     @updatedAt @map("updated_at") @db.Timestamptz()
  /// 软删除标记
  deletedAt       DateTime?    @map("deleted_at") @db.Timestamptz()

  @@index([collectionId])
  @@index([uid, updatedAt])
  @@map("resources")
}

/// 知识集
model Collection {
  /// 主键
  id           BigInt    @id @default(autoincrement())
  /// 知识集 id
  collectionId String    @unique @map("collection_id")
  /// 标题
  title        String    @map("title")
  /// 描述
  description  String?   @default("") @map("description")
  /// UID
  uid          String    @default("") @map("uid")
  /// 是否公开
  isPublic     Boolean   @default(false) @map("is_public")
  /// 创建时间
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  /// 更新时间
  updatedAt    DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  /// 软删除标记
  deletedAt    DateTime? @map("deleted_at") @db.Timestamptz()

  @@index([uid, updatedAt])
  @@map("collections")
}

/// User-defined skills.
model SkillInstance {
  /// Primary key
  pk          BigInt    @id @default(autoincrement())
  /// Skill id
  skillId     String    @unique @map("skill_id")
  /// Skill name (correspond to names of skill templates)
  skillName   String    @map("skill_name")
  /// Skill display name
  displayName String    @default("") @map("display_name")
  /// UID of skill owner
  uid         String    @map("uid")
  /// Workflow configuration (JSON)
  config      String    @default("{}") @map("config")
  /// Create timestamp
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  /// Update timestamp
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  /// Deletion timestamp
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz()

  @@index([uid, updatedAt])
  @@map("skill_instances")
}

model SkillTrigger {
  /// Primary key
  pk        BigInt    @id @default(autoincrement())
  /// Trigger id
  triggerId String    @unique @map("trigger_id")
  /// Skill id
  skillId   String    @map("skill_id")
  /// Owner UID
  uid       String    @map("uid")
  /// Trigger event
  event     String    @map("event")
  /// Crontab for cron trigger
  crontab   String?   @map("crontab")
  /// Whether this skill is enabled
  enabled   Boolean   @map("enabled")
  /// Create timestamp
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  /// Update timestamp
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  /// Deletion timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz()

  @@index([skillId, deletedAt])
  @@map("skill_triggers")
}

/// Running logs of skills.
model SkillLog {
  /// Primary key
  pk             BigInt       @id @default(autoincrement())
  /// Skill log id
  logId          String       @unique @map("log_id")
  /// Skill id
  skillId        String       @map("skill_id")
  /// Skill name
  skillName      String       @map("skill_name")
  /// Mode for this skill run
  mode           SkillRunMode @map("mode")
  /// Input (JSON of `SkillInput`)
  input          String       @map("input")
  /// Context (JSON of `SkillContext`)
  context        String       @map("context")
  /// Skill config to override
  overrideConfig String       @map("override_config")
  /// Skill operation status
  status         SkillStatus  @map("status")
  /// Skill trigger event
  event          String       @map("event")
  /// Skill trigger id
  triggerId      String       @map("trigger_id")
  /// UID of skill owner
  uid            String       @map("uid")
  /// Create timestamp
  createdAt      DateTime     @default(now()) @map("created_at") @db.Timestamptz()
  /// Update timestamp
  updatedAt      DateTime     @updatedAt @map("updated_at") @db.Timestamptz()

  @@index([uid, updatedAt])
  @@map("skill_log")
}

enum ResourceType {
  weblink
  note
}

enum ParseSource {
  serverCrawl
  clientUpload
}

enum IndexStatus {
  init
  processing
  finish
  failed
}

enum SkillStatus {
  scheduling
  running
  finish
  failed
}

enum SkillRunMode {
  async
  stream
}

enum MessageType {
  ai
  human
  system
}
