// generated with @7nohe/openapi-react-query-codegen@2.0.0-beta.3 

import { type Options } from "@hey-api/client-fetch";
import { type QueryClient } from "@tanstack/react-query";
import { checkSettingsField, getActionResult, getConversationDetail, getDocumentDetail, getProjectDetail, getResourceDetail, getSettings, getShareContent, getSkillJobDetail, getSubscriptionPlan, getSubscriptionUsage, listActions, listCanvases, listConversations, listDocuments, listLabelClasses, listLabelInstances, listModels, listProjects, listResources, listSkillInstances, listSkillJobs, listSkills, listSkillTriggers, serveStatic } from "../requests/services.gen";
import { CheckSettingsFieldData, GetActionResultData, GetConversationDetailData, GetDocumentDetailData, GetProjectDetailData, GetResourceDetailData, GetShareContentData, GetSkillJobDetailData, ListCanvasesData, ListConversationsData, ListDocumentsData, ListLabelClassesData, ListLabelInstancesData, ListProjectsData, ListResourcesData, ListSkillInstancesData, ListSkillJobsData, ListSkillTriggersData } from "../requests/types.gen";
import * as Common from "./common";
export const prefetchUseListCanvases = (queryClient: QueryClient, clientOptions: Options<ListCanvasesData, true> = {}) => queryClient.prefetchQuery({ queryKey: Common.UseListCanvasesKeyFn(clientOptions), queryFn: () => listCanvases({ ...clientOptions }).then(response => response.data) });
export const prefetchUseListResources = (queryClient: QueryClient, clientOptions: Options<ListResourcesData, true> = {}) => queryClient.prefetchQuery({ queryKey: Common.UseListResourcesKeyFn(clientOptions), queryFn: () => listResources({ ...clientOptions }).then(response => response.data) });
export const prefetchUseGetResourceDetail = (queryClient: QueryClient, clientOptions: Options<GetResourceDetailData, true>) => queryClient.prefetchQuery({ queryKey: Common.UseGetResourceDetailKeyFn(clientOptions), queryFn: () => getResourceDetail({ ...clientOptions }).then(response => response.data) });
export const prefetchUseListDocuments = (queryClient: QueryClient, clientOptions: Options<ListDocumentsData, true> = {}) => queryClient.prefetchQuery({ queryKey: Common.UseListDocumentsKeyFn(clientOptions), queryFn: () => listDocuments({ ...clientOptions }).then(response => response.data) });
export const prefetchUseGetDocumentDetail = (queryClient: QueryClient, clientOptions: Options<GetDocumentDetailData, true>) => queryClient.prefetchQuery({ queryKey: Common.UseGetDocumentDetailKeyFn(clientOptions), queryFn: () => getDocumentDetail({ ...clientOptions }).then(response => response.data) });
export const prefetchUseListProjects = (queryClient: QueryClient, clientOptions: Options<ListProjectsData, true> = {}) => queryClient.prefetchQuery({ queryKey: Common.UseListProjectsKeyFn(clientOptions), queryFn: () => listProjects({ ...clientOptions }).then(response => response.data) });
export const prefetchUseGetProjectDetail = (queryClient: QueryClient, clientOptions: Options<GetProjectDetailData, true>) => queryClient.prefetchQuery({ queryKey: Common.UseGetProjectDetailKeyFn(clientOptions), queryFn: () => getProjectDetail({ ...clientOptions }).then(response => response.data) });
export const prefetchUseGetShareContent = (queryClient: QueryClient, clientOptions: Options<GetShareContentData, true>) => queryClient.prefetchQuery({ queryKey: Common.UseGetShareContentKeyFn(clientOptions), queryFn: () => getShareContent({ ...clientOptions }).then(response => response.data) });
export const prefetchUseListLabelClasses = (queryClient: QueryClient, clientOptions: Options<ListLabelClassesData, true> = {}) => queryClient.prefetchQuery({ queryKey: Common.UseListLabelClassesKeyFn(clientOptions), queryFn: () => listLabelClasses({ ...clientOptions }).then(response => response.data) });
export const prefetchUseListLabelInstances = (queryClient: QueryClient, clientOptions: Options<ListLabelInstancesData, true> = {}) => queryClient.prefetchQuery({ queryKey: Common.UseListLabelInstancesKeyFn(clientOptions), queryFn: () => listLabelInstances({ ...clientOptions }).then(response => response.data) });
export const prefetchUseListActions = (queryClient: QueryClient, clientOptions: Options<unknown, true> = {}) => queryClient.prefetchQuery({ queryKey: Common.UseListActionsKeyFn(clientOptions), queryFn: () => listActions({ ...clientOptions }).then(response => response.data) });
export const prefetchUseGetActionResult = (queryClient: QueryClient, clientOptions: Options<GetActionResultData, true>) => queryClient.prefetchQuery({ queryKey: Common.UseGetActionResultKeyFn(clientOptions), queryFn: () => getActionResult({ ...clientOptions }).then(response => response.data) });
export const prefetchUseListSkills = (queryClient: QueryClient, clientOptions: Options<unknown, true> = {}) => queryClient.prefetchQuery({ queryKey: Common.UseListSkillsKeyFn(clientOptions), queryFn: () => listSkills({ ...clientOptions }).then(response => response.data) });
export const prefetchUseListSkillInstances = (queryClient: QueryClient, clientOptions: Options<ListSkillInstancesData, true> = {}) => queryClient.prefetchQuery({ queryKey: Common.UseListSkillInstancesKeyFn(clientOptions), queryFn: () => listSkillInstances({ ...clientOptions }).then(response => response.data) });
export const prefetchUseListSkillTriggers = (queryClient: QueryClient, clientOptions: Options<ListSkillTriggersData, true> = {}) => queryClient.prefetchQuery({ queryKey: Common.UseListSkillTriggersKeyFn(clientOptions), queryFn: () => listSkillTriggers({ ...clientOptions }).then(response => response.data) });
export const prefetchUseListSkillJobs = (queryClient: QueryClient, clientOptions: Options<ListSkillJobsData, true> = {}) => queryClient.prefetchQuery({ queryKey: Common.UseListSkillJobsKeyFn(clientOptions), queryFn: () => listSkillJobs({ ...clientOptions }).then(response => response.data) });
export const prefetchUseGetSkillJobDetail = (queryClient: QueryClient, clientOptions: Options<GetSkillJobDetailData, true> = {}) => queryClient.prefetchQuery({ queryKey: Common.UseGetSkillJobDetailKeyFn(clientOptions), queryFn: () => getSkillJobDetail({ ...clientOptions }).then(response => response.data) });
export const prefetchUseListConversations = (queryClient: QueryClient, clientOptions: Options<ListConversationsData, true> = {}) => queryClient.prefetchQuery({ queryKey: Common.UseListConversationsKeyFn(clientOptions), queryFn: () => listConversations({ ...clientOptions }).then(response => response.data) });
export const prefetchUseGetConversationDetail = (queryClient: QueryClient, clientOptions: Options<GetConversationDetailData, true>) => queryClient.prefetchQuery({ queryKey: Common.UseGetConversationDetailKeyFn(clientOptions), queryFn: () => getConversationDetail({ ...clientOptions }).then(response => response.data) });
export const prefetchUseGetSettings = (queryClient: QueryClient, clientOptions: Options<unknown, true> = {}) => queryClient.prefetchQuery({ queryKey: Common.UseGetSettingsKeyFn(clientOptions), queryFn: () => getSettings({ ...clientOptions }).then(response => response.data) });
export const prefetchUseCheckSettingsField = (queryClient: QueryClient, clientOptions: Options<CheckSettingsFieldData, true>) => queryClient.prefetchQuery({ queryKey: Common.UseCheckSettingsFieldKeyFn(clientOptions), queryFn: () => checkSettingsField({ ...clientOptions }).then(response => response.data) });
export const prefetchUseGetSubscriptionPlan = (queryClient: QueryClient, clientOptions: Options<unknown, true> = {}) => queryClient.prefetchQuery({ queryKey: Common.UseGetSubscriptionPlanKeyFn(clientOptions), queryFn: () => getSubscriptionPlan({ ...clientOptions }).then(response => response.data) });
export const prefetchUseGetSubscriptionUsage = (queryClient: QueryClient, clientOptions: Options<unknown, true> = {}) => queryClient.prefetchQuery({ queryKey: Common.UseGetSubscriptionUsageKeyFn(clientOptions), queryFn: () => getSubscriptionUsage({ ...clientOptions }).then(response => response.data) });
export const prefetchUseListModels = (queryClient: QueryClient, clientOptions: Options<unknown, true> = {}) => queryClient.prefetchQuery({ queryKey: Common.UseListModelsKeyFn(clientOptions), queryFn: () => listModels({ ...clientOptions }).then(response => response.data) });
export const prefetchUseServeStatic = (queryClient: QueryClient, clientOptions: Options<unknown, true> = {}) => queryClient.prefetchQuery({ queryKey: Common.UseServeStaticKeyFn(clientOptions), queryFn: () => serveStatic({ ...clientOptions }).then(response => response.data) });
