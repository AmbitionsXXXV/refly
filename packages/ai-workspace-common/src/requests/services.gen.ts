// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options, formDataBodySerializer } from '@hey-api/client-fetch';
import type { ListCanvasesData, ListCanvasesError, ListCanvasesResponse, CreateCanvasData, CreateCanvasError, CreateCanvasResponse, DeleteCanvasData, DeleteCanvasError, DeleteCanvasResponse, ListResourcesData, ListResourcesError, ListResourcesResponse, GetResourceDetailData, GetResourceDetailError, GetResourceDetailResponse2, UpdateResourceData, UpdateResourceError, UpdateResourceResponse, CreateResourceData, CreateResourceError, CreateResourceResponse, BatchCreateResourceData, BatchCreateResourceError, BatchCreateResourceResponse2, ReindexResourceData, ReindexResourceError, ReindexResourceResponse2, DeleteResourceData, DeleteResourceError, DeleteResourceResponse, ListDocumentsData, ListDocumentsError, ListDocumentsResponse, GetDocumentDetailData, GetDocumentDetailError, GetDocumentDetailResponse2, UpdateDocumentData, UpdateDocumentError, UpdateDocumentResponse, CreateDocumentData, CreateDocumentError, CreateDocumentResponse, DeleteDocumentData, DeleteDocumentError, DeleteDocumentResponse, BatchUpdateDocumentData, BatchUpdateDocumentError, BatchUpdateDocumentResponse, QueryReferencesData, QueryReferencesError, QueryReferencesResponse2, AddReferencesData, AddReferencesError, AddReferencesResponse2, DeleteReferencesData, DeleteReferencesError, DeleteReferencesResponse, ListProjectsData, ListProjectsError, ListProjectsResponse, GetProjectDetailData, GetProjectDetailError, GetProjectDetailResponse2, UpdateProjectData, UpdateProjectError, UpdateProjectResponse, CreateProjectData, CreateProjectError, CreateProjectResponse, BindProjectResourcesData, BindProjectResourcesError, BindProjectResourcesResponse, DeleteProjectData, DeleteProjectError, DeleteProjectResponse, CreateShareData, CreateShareError, CreateShareResponse2, DeleteShareData, DeleteShareError, DeleteShareResponse, GetShareContentData, GetShareContentError, GetShareContentResponse2, ListLabelClassesData, ListLabelClassesError, ListLabelClassesResponse2, CreateLabelClassData, CreateLabelClassError, CreateLabelClassResponse, UpdateLabelClassData, UpdateLabelClassError, UpdateLabelClassResponse, DeleteLabelClassData, DeleteLabelClassError, DeleteLabelClassResponse, ListLabelInstancesData, ListLabelInstancesError, ListLabelInstancesResponse2, CreateLabelInstanceData, CreateLabelInstanceError, CreateLabelInstanceResponse, UpdateLabelInstanceData, UpdateLabelInstanceError, UpdateLabelInstanceResponse, DeleteLabelInstanceData, DeleteLabelInstanceError, DeleteLabelInstanceResponse, ListActionsError, ListActionsResponse, InvokeActionData, InvokeActionError, InvokeActionResponse2, StreamInvokeActionData, StreamInvokeActionError, StreamInvokeActionResponse, GetActionResultData, GetActionResultError, GetActionResultResponse2, ListSkillsError, ListSkillsResponse, InvokeSkillData, InvokeSkillError, InvokeSkillResponse2, StreamInvokeSkillData, StreamInvokeSkillError, StreamInvokeSkillResponse, ListSkillInstancesData, ListSkillInstancesError, ListSkillInstancesResponse, CreateSkillInstanceData, CreateSkillInstanceError, CreateSkillInstanceResponse2, UpdateSkillInstanceData, UpdateSkillInstanceError, UpdateSkillInstanceResponse2, PinSkillInstanceData, PinSkillInstanceError, PinSkillInstanceResponse, UnpinSkillInstanceData, UnpinSkillInstanceError, UnpinSkillInstanceResponse, DeleteSkillInstanceData, DeleteSkillInstanceError, DeleteSkillInstanceResponse, ListSkillTriggersData, ListSkillTriggersError, ListSkillTriggersResponse, CreateSkillTriggerData, CreateSkillTriggerError, CreateSkillTriggerResponse2, UpdateSkillTriggerData, UpdateSkillTriggerError, UpdateSkillTriggerResponse2, DeleteSkillTriggerData, DeleteSkillTriggerError, DeleteSkillTriggerResponse, ListSkillJobsData, ListSkillJobsError, ListSkillJobsResponse2, GetSkillJobDetailData, GetSkillJobDetailError, GetSkillJobDetailResponse2, ListConversationsData, ListConversationsError, ListConversationsResponse, GetConversationDetailData, GetConversationDetailError, GetConversationDetailResponse2, GetSettingsError, GetSettingsResponse, UpdateSettingsData, UpdateSettingsError, UpdateSettingsResponse, CheckSettingsFieldData, CheckSettingsFieldError, CheckSettingsFieldResponse2, GetSubscriptionPlanError, GetSubscriptionPlanResponse, GetSubscriptionUsageError, GetSubscriptionUsageResponse2, ListModelsError, ListModelsResponse2, CreateCheckoutSessionData, CreateCheckoutSessionError, CreateCheckoutSessionResponse2, CreatePortalSessionError, CreatePortalSessionResponse2, SearchData, SearchError, SearchResponse2, MultiLingualWebSearchData, MultiLingualWebSearchError, MultiLingualWebSearchResponse2, ScrapeData, ScrapeError, ScrapeResponse, UploadData, UploadError, UploadResponse2, ServeStaticError, ServeStaticResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * List user canvases
 * List all canvases for a user
 */
export const listCanvases = <ThrowOnError extends boolean = false>(options?: Options<ListCanvasesData, ThrowOnError>) => { return (options?.client ?? client).get<ListCanvasesResponse, ListCanvasesError, ThrowOnError>({
    ...options,
    url: '/canvas/list'
}); };

/**
 * Create canvas
 * Create a new canvas
 */
export const createCanvas = <ThrowOnError extends boolean = false>(options: Options<CreateCanvasData, ThrowOnError>) => { return (options?.client ?? client).post<CreateCanvasResponse, CreateCanvasError, ThrowOnError>({
    ...options,
    url: '/canvas/create'
}); };

/**
 * Delete canvas
 * Delete an existing canvas
 */
export const deleteCanvas = <ThrowOnError extends boolean = false>(options: Options<DeleteCanvasData, ThrowOnError>) => { return (options?.client ?? client).post<DeleteCanvasResponse, DeleteCanvasError, ThrowOnError>({
    ...options,
    url: '/canvas/delete'
}); };

/**
 * List resources
 * List all resources
 */
export const listResources = <ThrowOnError extends boolean = false>(options?: Options<ListResourcesData, ThrowOnError>) => { return (options?.client ?? client).get<ListResourcesResponse, ListResourcesError, ThrowOnError>({
    ...options,
    url: '/knowledge/resource/list'
}); };

/**
 * Get resource detail
 * Return resource detail along with its document content
 */
export const getResourceDetail = <ThrowOnError extends boolean = false>(options: Options<GetResourceDetailData, ThrowOnError>) => { return (options?.client ?? client).get<GetResourceDetailResponse2, GetResourceDetailError, ThrowOnError>({
    ...options,
    url: '/knowledge/resource/detail'
}); };

/**
 * Update resource
 * Update an existing resource
 */
export const updateResource = <ThrowOnError extends boolean = false>(options: Options<UpdateResourceData, ThrowOnError>) => { return (options?.client ?? client).post<UpdateResourceResponse, UpdateResourceError, ThrowOnError>({
    ...options,
    url: '/knowledge/resource/update'
}); };

/**
 * Create new resource
 * Create a new resource
 */
export const createResource = <ThrowOnError extends boolean = false>(options: Options<CreateResourceData, ThrowOnError>) => { return (options?.client ?? client).post<CreateResourceResponse, CreateResourceError, ThrowOnError>({
    ...options,
    url: '/knowledge/resource/create'
}); };

/**
 * Batch create new resources
 * Batch create a new resource
 */
export const batchCreateResource = <ThrowOnError extends boolean = false>(options: Options<BatchCreateResourceData, ThrowOnError>) => { return (options?.client ?? client).post<BatchCreateResourceResponse2, BatchCreateResourceError, ThrowOnError>({
    ...options,
    url: '/knowledge/resource/batchCreate'
}); };

/**
 * Reindex resource
 * Reindex an existing resource
 */
export const reindexResource = <ThrowOnError extends boolean = false>(options: Options<ReindexResourceData, ThrowOnError>) => { return (options?.client ?? client).post<ReindexResourceResponse2, ReindexResourceError, ThrowOnError>({
    ...options,
    url: '/knowledge/resource/reindex'
}); };

/**
 * Delete resource
 * Delete an existing resource
 */
export const deleteResource = <ThrowOnError extends boolean = false>(options: Options<DeleteResourceData, ThrowOnError>) => { return (options?.client ?? client).post<DeleteResourceResponse, DeleteResourceError, ThrowOnError>({
    ...options,
    url: '/knowledge/resource/delete'
}); };

/**
 * List user documents
 * List all documents for a user
 */
export const listDocuments = <ThrowOnError extends boolean = false>(options?: Options<ListDocumentsData, ThrowOnError>) => { return (options?.client ?? client).get<ListDocumentsResponse, ListDocumentsError, ThrowOnError>({
    ...options,
    url: '/knowledge/document/list'
}); };

/**
 * Get canvas detail
 * Return document detail
 */
export const getDocumentDetail = <ThrowOnError extends boolean = false>(options: Options<GetDocumentDetailData, ThrowOnError>) => { return (options?.client ?? client).get<GetDocumentDetailResponse2, GetDocumentDetailError, ThrowOnError>({
    ...options,
    url: '/knowledge/document/detail'
}); };

/**
 * Update canvas
 * Update an existing document
 */
export const updateDocument = <ThrowOnError extends boolean = false>(options: Options<UpdateDocumentData, ThrowOnError>) => { return (options?.client ?? client).post<UpdateDocumentResponse, UpdateDocumentError, ThrowOnError>({
    ...options,
    url: '/knowledge/document/update'
}); };

/**
 * Create new canvas
 * Create a new document
 */
export const createDocument = <ThrowOnError extends boolean = false>(options: Options<CreateDocumentData, ThrowOnError>) => { return (options?.client ?? client).post<CreateDocumentResponse, CreateDocumentError, ThrowOnError>({
    ...options,
    url: '/knowledge/document/create'
}); };

/**
 * Delete canvas
 * Delete an existing document
 */
export const deleteDocument = <ThrowOnError extends boolean = false>(options: Options<DeleteDocumentData, ThrowOnError>) => { return (options?.client ?? client).post<DeleteDocumentResponse, DeleteDocumentError, ThrowOnError>({
    ...options,
    url: '/knowledge/document/delete'
}); };

/**
 * Batch update documents
 * Batch update existing documents
 */
export const batchUpdateDocument = <ThrowOnError extends boolean = false>(options: Options<BatchUpdateDocumentData, ThrowOnError>) => { return (options?.client ?? client).post<BatchUpdateDocumentResponse, BatchUpdateDocumentError, ThrowOnError>({
    ...options,
    url: '/knowledge/document/batchUpdate'
}); };

/**
 * Query references
 * Query references by source or target entity
 */
export const queryReferences = <ThrowOnError extends boolean = false>(options: Options<QueryReferencesData, ThrowOnError>) => { return (options?.client ?? client).post<QueryReferencesResponse2, QueryReferencesError, ThrowOnError>({
    ...options,
    url: '/knowledge/reference/query'
}); };

/**
 * Add references
 * Add references between source and target entities
 */
export const addReferences = <ThrowOnError extends boolean = false>(options: Options<AddReferencesData, ThrowOnError>) => { return (options?.client ?? client).post<AddReferencesResponse2, AddReferencesError, ThrowOnError>({
    ...options,
    url: '/knowledge/reference/add'
}); };

/**
 * Delete references
 * Delete references between source and target entities
 */
export const deleteReferences = <ThrowOnError extends boolean = false>(options: Options<DeleteReferencesData, ThrowOnError>) => { return (options?.client ?? client).post<DeleteReferencesResponse, DeleteReferencesError, ThrowOnError>({
    ...options,
    url: '/knowledge/reference/delete'
}); };

/**
 * List user projects
 * List all projects for a user
 */
export const listProjects = <ThrowOnError extends boolean = false>(options?: Options<ListProjectsData, ThrowOnError>) => { return (options?.client ?? client).get<ListProjectsResponse, ListProjectsError, ThrowOnError>({
    ...options,
    url: '/knowledge/project/list'
}); };

/**
 * Get project detail
 * Return project details along with its canvases
 */
export const getProjectDetail = <ThrowOnError extends boolean = false>(options: Options<GetProjectDetailData, ThrowOnError>) => { return (options?.client ?? client).get<GetProjectDetailResponse2, GetProjectDetailError, ThrowOnError>({
    ...options,
    url: '/knowledge/project/detail'
}); };

/**
 * Update project
 * Update an existing project
 */
export const updateProject = <ThrowOnError extends boolean = false>(options: Options<UpdateProjectData, ThrowOnError>) => { return (options?.client ?? client).post<UpdateProjectResponse, UpdateProjectError, ThrowOnError>({
    ...options,
    url: '/knowledge/project/update'
}); };

/**
 * Create new project
 * Create a new project
 */
export const createProject = <ThrowOnError extends boolean = false>(options: Options<CreateProjectData, ThrowOnError>) => { return (options?.client ?? client).post<CreateProjectResponse, CreateProjectError, ThrowOnError>({
    ...options,
    url: '/knowledge/project/create'
}); };

/**
 * Bind resources to project
 * Bind existing resources to a project
 */
export const bindProjectResources = <ThrowOnError extends boolean = false>(options: Options<BindProjectResourcesData, ThrowOnError>) => { return (options?.client ?? client).post<BindProjectResourcesResponse, BindProjectResourcesError, ThrowOnError>({
    ...options,
    url: '/knowledge/project/bindRes'
}); };

/**
 * Delete project
 * Delete an existing project
 */
export const deleteProject = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectData, ThrowOnError>) => { return (options?.client ?? client).post<DeleteProjectResponse, DeleteProjectError, ThrowOnError>({
    ...options,
    url: '/knowledge/project/delete'
}); };

/**
 * Create share
 * Create new share for project or canvas
 */
export const createShare = <ThrowOnError extends boolean = false>(options: Options<CreateShareData, ThrowOnError>) => { return (options?.client ?? client).post<CreateShareResponse2, CreateShareError, ThrowOnError>({
    ...options,
    url: '/share/new'
}); };

/**
 * Delete share
 * Delete an existing share
 */
export const deleteShare = <ThrowOnError extends boolean = false>(options: Options<DeleteShareData, ThrowOnError>) => { return (options?.client ?? client).post<DeleteShareResponse, DeleteShareError, ThrowOnError>({
    ...options,
    url: '/share/delete'
}); };

/**
 * Get share content
 * Get share content by share code
 */
export const getShareContent = <ThrowOnError extends boolean = false>(options: Options<GetShareContentData, ThrowOnError>) => { return (options?.client ?? client).get<GetShareContentResponse2, GetShareContentError, ThrowOnError>({
    ...options,
    url: '/share/content'
}); };

/**
 * List label classes
 * List all label classes
 */
export const listLabelClasses = <ThrowOnError extends boolean = false>(options?: Options<ListLabelClassesData, ThrowOnError>) => { return (options?.client ?? client).get<ListLabelClassesResponse2, ListLabelClassesError, ThrowOnError>({
    ...options,
    url: '/label/class/list'
}); };

/**
 * Create new label class
 * Create a new label class
 */
export const createLabelClass = <ThrowOnError extends boolean = false>(options: Options<CreateLabelClassData, ThrowOnError>) => { return (options?.client ?? client).post<CreateLabelClassResponse, CreateLabelClassError, ThrowOnError>({
    ...options,
    url: '/label/class/new'
}); };

/**
 * Update label class
 * Update an existing label class
 */
export const updateLabelClass = <ThrowOnError extends boolean = false>(options: Options<UpdateLabelClassData, ThrowOnError>) => { return (options?.client ?? client).post<UpdateLabelClassResponse, UpdateLabelClassError, ThrowOnError>({
    ...options,
    url: '/label/class/update'
}); };

/**
 * Delete label class
 * Delete an existing label class
 */
export const deleteLabelClass = <ThrowOnError extends boolean = false>(options: Options<DeleteLabelClassData, ThrowOnError>) => { return (options?.client ?? client).post<DeleteLabelClassResponse, DeleteLabelClassError, ThrowOnError>({
    ...options,
    url: '/label/class/delete'
}); };

/**
 * List labels
 * List all label instances
 */
export const listLabelInstances = <ThrowOnError extends boolean = false>(options?: Options<ListLabelInstancesData, ThrowOnError>) => { return (options?.client ?? client).get<ListLabelInstancesResponse2, ListLabelInstancesError, ThrowOnError>({
    ...options,
    url: '/label/instance/list'
}); };

/**
 * Create new label instance
 * Create new label instance
 */
export const createLabelInstance = <ThrowOnError extends boolean = false>(options: Options<CreateLabelInstanceData, ThrowOnError>) => { return (options?.client ?? client).post<CreateLabelInstanceResponse, CreateLabelInstanceError, ThrowOnError>({
    ...options,
    url: '/label/instance/new'
}); };

/**
 * Update label
 * Update an existing label instance
 */
export const updateLabelInstance = <ThrowOnError extends boolean = false>(options: Options<UpdateLabelInstanceData, ThrowOnError>) => { return (options?.client ?? client).post<UpdateLabelInstanceResponse, UpdateLabelInstanceError, ThrowOnError>({
    ...options,
    url: '/label/instance/update'
}); };

/**
 * Delete label
 * Delete an existing label
 */
export const deleteLabelInstance = <ThrowOnError extends boolean = false>(options: Options<DeleteLabelInstanceData, ThrowOnError>) => { return (options?.client ?? client).post<DeleteLabelInstanceResponse, DeleteLabelInstanceError, ThrowOnError>({
    ...options,
    url: '/label/instance/delete'
}); };

/**
 * List actions
 * List all actions
 */
export const listActions = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<ListActionsResponse, ListActionsError, ThrowOnError>({
    ...options,
    url: '/action/list'
}); };

/**
 * Invoke action
 * Invoke an action asynchronously
 */
export const invokeAction = <ThrowOnError extends boolean = false>(options: Options<InvokeActionData, ThrowOnError>) => { return (options?.client ?? client).post<InvokeActionResponse2, InvokeActionError, ThrowOnError>({
    ...options,
    url: '/action/invoke'
}); };

/**
 * Stream invoke action
 * Invoke an action and return SSE stream
 */
export const streamInvokeAction = <ThrowOnError extends boolean = false>(options: Options<StreamInvokeActionData, ThrowOnError>) => { return (options?.client ?? client).post<StreamInvokeActionResponse, StreamInvokeActionError, ThrowOnError>({
    ...options,
    url: '/action/streamInvoke'
}); };

/**
 * Get action result
 * Get action result by result ID
 */
export const getActionResult = <ThrowOnError extends boolean = false>(options: Options<GetActionResultData, ThrowOnError>) => { return (options?.client ?? client).get<GetActionResultResponse2, GetActionResultError, ThrowOnError>({
    ...options,
    url: '/action/result'
}); };

/**
 * List skills
 * List all skills
 */
export const listSkills = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<ListSkillsResponse, ListSkillsError, ThrowOnError>({
    ...options,
    url: '/skill/list'
}); };

/**
 * Invoke skill
 * Invoke a skill
 */
export const invokeSkill = <ThrowOnError extends boolean = false>(options: Options<InvokeSkillData, ThrowOnError>) => { return (options?.client ?? client).post<InvokeSkillResponse2, InvokeSkillError, ThrowOnError>({
    ...options,
    url: '/skill/invoke'
}); };

/**
 * Stream invoke skill
 * Invoke a skill and return SSE stream
 */
export const streamInvokeSkill = <ThrowOnError extends boolean = false>(options: Options<StreamInvokeSkillData, ThrowOnError>) => { return (options?.client ?? client).post<StreamInvokeSkillResponse, StreamInvokeSkillError, ThrowOnError>({
    ...options,
    url: '/skill/streamInvoke'
}); };

/**
 * List skill instances
 * List skill instances for a user
 */
export const listSkillInstances = <ThrowOnError extends boolean = false>(options?: Options<ListSkillInstancesData, ThrowOnError>) => { return (options?.client ?? client).get<ListSkillInstancesResponse, ListSkillInstancesError, ThrowOnError>({
    ...options,
    url: '/skill/instance/list'
}); };

/**
 * Create new skill instance
 * Create a new skill instance for user
 */
export const createSkillInstance = <ThrowOnError extends boolean = false>(options: Options<CreateSkillInstanceData, ThrowOnError>) => { return (options?.client ?? client).post<CreateSkillInstanceResponse2, CreateSkillInstanceError, ThrowOnError>({
    ...options,
    url: '/skill/instance/new'
}); };

/**
 * Update skill instance
 * Update an existing skill instance
 */
export const updateSkillInstance = <ThrowOnError extends boolean = false>(options: Options<UpdateSkillInstanceData, ThrowOnError>) => { return (options?.client ?? client).post<UpdateSkillInstanceResponse2, UpdateSkillInstanceError, ThrowOnError>({
    ...options,
    url: '/skill/instance/update'
}); };

/**
 * Pin skill instance
 * Pin an existing skill instance
 */
export const pinSkillInstance = <ThrowOnError extends boolean = false>(options: Options<PinSkillInstanceData, ThrowOnError>) => { return (options?.client ?? client).post<PinSkillInstanceResponse, PinSkillInstanceError, ThrowOnError>({
    ...options,
    url: '/skill/instance/pin'
}); };

/**
 * Unpin skill instance
 * Unpin an existing skill instance
 */
export const unpinSkillInstance = <ThrowOnError extends boolean = false>(options: Options<UnpinSkillInstanceData, ThrowOnError>) => { return (options?.client ?? client).post<UnpinSkillInstanceResponse, UnpinSkillInstanceError, ThrowOnError>({
    ...options,
    url: '/skill/instance/unpin'
}); };

/**
 * Delete skill instance
 * Delete an existing skill instance
 */
export const deleteSkillInstance = <ThrowOnError extends boolean = false>(options: Options<DeleteSkillInstanceData, ThrowOnError>) => { return (options?.client ?? client).post<DeleteSkillInstanceResponse, DeleteSkillInstanceError, ThrowOnError>({
    ...options,
    url: '/skill/instance/delete'
}); };

/**
 * List skill triggers
 * List all skill triggers
 */
export const listSkillTriggers = <ThrowOnError extends boolean = false>(options?: Options<ListSkillTriggersData, ThrowOnError>) => { return (options?.client ?? client).get<ListSkillTriggersResponse, ListSkillTriggersError, ThrowOnError>({
    ...options,
    url: '/skill/trigger/list'
}); };

/**
 * Create new trigger
 * Create a new trigger
 */
export const createSkillTrigger = <ThrowOnError extends boolean = false>(options: Options<CreateSkillTriggerData, ThrowOnError>) => { return (options?.client ?? client).post<CreateSkillTriggerResponse2, CreateSkillTriggerError, ThrowOnError>({
    ...options,
    url: '/skill/trigger/new'
}); };

/**
 * Update trigger
 * Update an existing trigger
 */
export const updateSkillTrigger = <ThrowOnError extends boolean = false>(options: Options<UpdateSkillTriggerData, ThrowOnError>) => { return (options?.client ?? client).post<UpdateSkillTriggerResponse2, UpdateSkillTriggerError, ThrowOnError>({
    ...options,
    url: '/skill/trigger/update'
}); };

/**
 * Delete trigger
 * Delete an existing trigger
 */
export const deleteSkillTrigger = <ThrowOnError extends boolean = false>(options: Options<DeleteSkillTriggerData, ThrowOnError>) => { return (options?.client ?? client).post<DeleteSkillTriggerResponse, DeleteSkillTriggerError, ThrowOnError>({
    ...options,
    url: '/skill/trigger/delete'
}); };

/**
 * Get skill jobs
 * Get skill jobs
 */
export const listSkillJobs = <ThrowOnError extends boolean = false>(options?: Options<ListSkillJobsData, ThrowOnError>) => { return (options?.client ?? client).get<ListSkillJobsResponse2, ListSkillJobsError, ThrowOnError>({
    ...options,
    url: '/skill/job/list'
}); };

/**
 * Get skill job detail
 * Get skill job detail
 */
export const getSkillJobDetail = <ThrowOnError extends boolean = false>(options?: Options<GetSkillJobDetailData, ThrowOnError>) => { return (options?.client ?? client).get<GetSkillJobDetailResponse2, GetSkillJobDetailError, ThrowOnError>({
    ...options,
    url: '/skill/job/detail'
}); };

/**
 * List conversations
 * List all conversations
 */
export const listConversations = <ThrowOnError extends boolean = false>(options?: Options<ListConversationsData, ThrowOnError>) => { return (options?.client ?? client).get<ListConversationsResponse, ListConversationsError, ThrowOnError>({
    ...options,
    url: '/conversation/list'
}); };

/**
 * Get conversation detail
 * Get conversation detail
 */
export const getConversationDetail = <ThrowOnError extends boolean = false>(options: Options<GetConversationDetailData, ThrowOnError>) => { return (options?.client ?? client).get<GetConversationDetailResponse2, GetConversationDetailError, ThrowOnError>({
    ...options,
    url: '/conversation/{convId}'
}); };

/**
 * Get user settings
 * Return settings for current user
 */
export const getSettings = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetSettingsResponse, GetSettingsError, ThrowOnError>({
    ...options,
    url: '/user/settings'
}); };

/**
 * Update user settings
 * Update settings for current user
 */
export const updateSettings = <ThrowOnError extends boolean = false>(options: Options<UpdateSettingsData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateSettingsResponse, UpdateSettingsError, ThrowOnError>({
    ...options,
    url: '/user/settings'
}); };

/**
 * Check settings field
 * Given a settings field, check if the given value is valid
 */
export const checkSettingsField = <ThrowOnError extends boolean = false>(options: Options<CheckSettingsFieldData, ThrowOnError>) => { return (options?.client ?? client).get<CheckSettingsFieldResponse2, CheckSettingsFieldError, ThrowOnError>({
    ...options,
    url: '/user/checkSettingsField'
}); };

/**
 * Get subscription plan
 * Get subscription plan
 */
export const getSubscriptionPlan = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetSubscriptionPlanResponse, GetSubscriptionPlanError, ThrowOnError>({
    ...options,
    url: '/subscription/plan'
}); };

/**
 * Get subscription usage
 * Get subscription usage
 */
export const getSubscriptionUsage = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetSubscriptionUsageResponse2, GetSubscriptionUsageError, ThrowOnError>({
    ...options,
    url: '/subscription/usage'
}); };

/**
 * List models
 * List all available models
 */
export const listModels = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<ListModelsResponse2, ListModelsError, ThrowOnError>({
    ...options,
    url: '/subscription/modelList'
}); };

/**
 * Create checkout session
 * Create a checkout session
 */
export const createCheckoutSession = <ThrowOnError extends boolean = false>(options: Options<CreateCheckoutSessionData, ThrowOnError>) => { return (options?.client ?? client).post<CreateCheckoutSessionResponse2, CreateCheckoutSessionError, ThrowOnError>({
    ...options,
    url: '/subscription/createCheckoutSession'
}); };

/**
 * Create portal session
 * Create a portal session
 */
export const createPortalSession = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).post<CreatePortalSessionResponse2, CreatePortalSessionError, ThrowOnError>({
    ...options,
    url: '/subscription/createPortalSession'
}); };

/**
 * Search
 * Search for canvases, resources, projects, etc.
 */
export const search = <ThrowOnError extends boolean = false>(options: Options<SearchData, ThrowOnError>) => { return (options?.client ?? client).post<SearchResponse2, SearchError, ThrowOnError>({
    ...options,
    url: '/search'
}); };

/**
 * Multilingual Web Search
 * Search web content across multiple languages
 */
export const multiLingualWebSearch = <ThrowOnError extends boolean = false>(options: Options<MultiLingualWebSearchData, ThrowOnError>) => { return (options?.client ?? client).post<MultiLingualWebSearchResponse2, MultiLingualWebSearchError, ThrowOnError>({
    ...options,
    url: '/search/multilingualSearch'
}); };

/**
 * Scrape
 * Scrape a weblink
 */
export const scrape = <ThrowOnError extends boolean = false>(options: Options<ScrapeData, ThrowOnError>) => { return (options?.client ?? client).post<ScrapeResponse, ScrapeError, ThrowOnError>({
    ...options,
    url: '/misc/scrape'
}); };

/**
 * Upload
 * Upload a file
 */
export const upload = <ThrowOnError extends boolean = false>(options: Options<UploadData, ThrowOnError>) => { return (options?.client ?? client).post<UploadResponse2, UploadError, ThrowOnError>({
    ...options,
    ...formDataBodySerializer,
    headers: {
        'Content-Type': null,
        ...options?.headers
    },
    url: '/misc/upload'
}); };

/**
 * Serve static
 * Serve static files (only for local testing)
 */
export const serveStatic = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<ServeStaticResponse, ServeStaticError, ThrowOnError>({
    ...options,
    url: '/misc/static/{fileName}'
}); };