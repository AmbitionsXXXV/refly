openapi: 3.0.3
info:
  title: Refly AI
  description: AI-native knowledge management solutions and infra.
  contact:
    email: team@refly.ai
  version: 0.2.0
externalDocs:
  description: Where knowledge thrives
  url: https://refly.ai
servers:
  - url: /v1
tags:
  - name: knowledge
    description: Knowledge base management endpoints
  - name: chat
    description: Chatbot related endpoints
  - name: user
    description: User management endpoints
paths:
  /knowledge/resource/list:
    get:
      tags:
        - knowledge
      summary: List resources
      description: List all resources
      operationId: listResources
      parameters:
        - name: collectionId
          in: query
          description: Target collection ID
          schema:
            type: string
            example: cl-g30e1b80b5g1itbemc0g5jj3
        - name: page
          in: query
          description: Page number
          schema:
            type: number
            default: 1
        - name: pageSize
          in: query
          description: Page size
          schema:
            type: number
            default: 10
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResourceResponse'
      security:
        - api_key: []
  /knowledge/resource/detail:
    get:
      tags:
        - knowledge
      summary: Get resource detail
      description: Return resource detail along with its document content
      operationId: getResourceDetail
      parameters:
        - name: resourceId
          in: query
          description: Resource ID to retrieve
          required: true
          schema:
            type: string
            example: r-g30e1b80b5g1itbemc0g5jj3
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetResourceDetailResponse'
      security:
        - api_key: []
  /knowledge/resource/update:
    post:
      tags:
        - knowledge
      summary: Update resource
      description: Update an existing resource
      operationId: updateResource
      requestBody:
        description: Resource update request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertResourceRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertResourceResponse'
      security:
        - api_key: []
  /knowledge/resource/new:
    post:
      tags:
        - knowledge
      summary: Create new resource
      description: Create a new resource
      operationId: createResource
      requestBody:
        description: Resource creation request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertResourceRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertResourceResponse'
      security:
        - api_key: []
  /knowledge/resource/delete:
    post:
      tags:
        - knowledge
      summary: Delete resource
      description: Delete an existing resource
      operationId: deleteResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteResourceRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
      security:
        - api_key: []
  /knowledge/collection/list:
    get:
      tags:
        - knowledge
      summary: List user collections
      description: List all collections for a user
      operationId: listCollections
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: number
            default: 1
        - name: pageSize
          in: query
          description: Page size
          required: false
          schema:
            type: number
            default: 10
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCollectionResponse'
      security:
        - api_key: []
  /knowledge/collection/detail:
    get:
      tags:
        - knowledge
      summary: Get collection detail
      description: Return collection details along with its resources
      operationId: getCollectionDetail
      parameters:
        - name: collectionId
          in: query
          description: Collection ID to retrieve
          required: true
          schema:
            type: string
            example: cl-g30e1b80b5g1itbemc0g5jj3
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCollectionDetailResponse'
      security:
        - api_key: []
  /knowledge/collection/update:
    post:
      tags:
        - knowledge
      summary: Update collection
      description: Update an existing collection
      operationId: updateCollection
      requestBody:
        description: Collection update request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertCollectionRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
      security:
        - api_key: []
  /knowledge/collection/new:
    post:
      tags:
        - knowledge
      summary: Create new collection
      description: Create a new collection
      operationId: createCollection
      requestBody:
        description: Collection creation request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertCollectionRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
      security:
        - api_key: []
  /knowledge/collection/delete:
    post:
      tags:
        - knowledge
      summary: Delete collection
      description: Delete an existing collection
      operationId: deleteCollection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteCollectionRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
      security:
        - api_key: []
  /conversation/list:
    get:
      tags:
        - chat
      summary: List conversations
      description: List all conversations
      operationId: listConversations
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConversationResponse'
      security:
        - api_key: []
  /conversation/new:
    post:
      tags:
        - chat
      summary: Create new conversation
      description: Create a new conversation
      operationId: createConversation
      requestBody:
        description: Conversation creation request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConversationRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateConversationResponse'
  /conversation/{convId}:
    get:
      tags:
        - chat
      summary: Get conversation
      description: Get conversation detail
      operationId: getConversation
      parameters:
        - name: convId
          in: path
          description: Conversation ID
          example: cv-g30e1b80b5g1itbemc0g5jj3
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetConversationDetailResponse'
  /user/settings:
    get:
      tags:
        - user
      summary: Get user settings
      description: Return settings for current user
      operationId: getSettings
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettings'
      security:
        - api_key: []
    put:
      tags:
        - user
      summary: Update user settings
      description: Update settings for current user
      operationId: updateSettings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserSettingsRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
      security:
        - api_key: []
components:
  schemas:
    WeblinkMeta:
      type: object
      description: Weblink metadata
      required:
        - url
      properties:
        url:
          type: string
          description: Weblink URL
          example: https://www.google.com
        title:
          type: string
          description: Weblink title
          example: Google
        linkId:
          type: string
          description: Weblink ID (if it already exists)
          example: l-g30e1b80b5g1itbemc0g5jj3
        storageKey:
          type: string
          description: Storage key for the weblink
          deprecated: true
    ResourceMeta:
      description: Resource metadata
      oneOf:
        - $ref: '#/components/schemas/WeblinkMeta'
    ResourceType:
      type: string
      description: Resource type
      enum:
        - weblink
    ResourceListItem:
      type: object
      required:
        - resourceId
        - resourceType
        - isPublic
        - createdAt
        - updatedAt
      properties:
        resourceId:
          type: string
          description: Resource ID
          example: r-g30e1b80b5g1itbemc0g5jj3
        resourceType:
          description: Resource type
          $ref: '#/components/schemas/ResourceType'
        data:
          type: object
          description: Resource metadata
          $ref: '#/components/schemas/ResourceMeta'
        isPublic:
          type: boolean
          description: Whether this resource is public
          default: false
        createdAt:
          type: string
          format: date-time
          description: Collection creation time
        updatedAt:
          type: string
          format: date-time
          description: Collection creation time
    CollectionListItem:
      type: object
      required:
        - collectionId
        - title
        - createdAt
        - updatedAt
      properties:
        collectionId:
          type: string
          description: Collection ID
          example: cl-g30e1b80b5g1itbemc0g5jj3
        title:
          type: string
          description: Collection title
          example: Default Collection
        description:
          type: string
          description: Collection description
          example: Collection description
        isPublic:
          type: boolean
          description: Whether this collection is public
          default: false
        createdAt:
          type: string
          format: date-time
          description: Collection creation time
        updatedAt:
          type: string
          format: date-time
          description: Collection creation time
    ResourceDetail:
      allOf:
        - $ref: '#/components/schemas/ResourceListItem'
        - type: object
          properties:
            doc:
              type: string
              description: Document content for this resource
    CollectionDetail:
      allOf:
        - $ref: '#/components/schemas/CollectionListItem'
        - type: object
          properties:
            resources:
              type: array
              description: Collection resources
              items:
                $ref: '#/components/schemas/ResourceListItem'
    SourceMeta:
      type: object
      description: Source metadata
      required:
        - pageContent
        - score
      properties:
        source:
          type: string
          description: Source URL
        title:
          type: number
          description: Source title
    Source:
      type: object
      description: Source of the message
      properties:
        url:
          type: string
          description: Source URL
        title:
          type: string
          description: Source title
        pageContent:
          type: string
          description: Source content
        score:
          type: number
          description: Relativity score
        metadata:
          type: object
          description: Source metadata
          deprecated: true
          $ref: '#/components/schemas/SourceMeta'
    MessageType:
      type: string
      description: Chat message type
      enum:
        - ai
        - human
        - system
    ChatMessage:
      type: object
      description: Chat message
      required:
        - type
        - content
        - createdAt
      properties:
        type:
          description: Message type
          $ref: '#/components/schemas/MessageType'
        content:
          type: string
          description: Message content
          example: Hello
        createdAt:
          type: string
          format: date-time
          description: Message creation time
        updatedAt:
          type: string
          format: date-time
          description: Message update time
    ConversationListItem:
      type: object
      description: Conversation list item
      properties:
        convId:
          type: string
          description: Conversation ID
          example: cv-g30e1b80b5g1itbemc0g5jj3
        title:
          type: string
          description: Conversation title
          example: Default Conversation
        lastMessage:
          type: string
          description: Last message content
          example: Hello
        messageCount:
          type: number
          description: Number of chat messages in this conversation
          example: 42
        contentId:
          type: string
          description: Related content ID
          example: c-g30e1b80b5g1itbemc0g5jj3
        origin:
          type: string
          description: Origin page host
          example: https://refly.ai
        originPageTitle:
          type: string
          description: Origin page title
          example: Refly | Where knowledge thrives
        originPageUrl:
          type: string
          description: Origin page url
          example: https://refly.ai/knowledge-base
        createdAt:
          type: string
          format: date-time
          description: Conversation creation time
        updatedAt:
          type: string
          format: date-time
          description: Conversation creation time
    ConversationDetail:
      allOf:
        - $ref: '#/components/schemas/ConversationListItem'
        - type: object
          properties:
            messages:
              type: array
              description: Conversation messages
              items:
                $ref: '#/components/schemas/ChatMessage'
    UserSettings:
      type: object
      required:
        - uid
        - avatar
        - name
        - email
      properties:
        uid:
          type: string
          description: User ID
          example: u-g30e1b80b5g1itbemc0g5jj3
        avatar:
          type: string
          description: User avatar
          example: https://www.gstatic.com/webp/gallery/1.jpg
        name:
          type: string
          description: User name
          example: John Doe
        email:
          type: string
          description: User email
          example: 6XJpZ@example.com
        emailVerified:
          type: boolean
          description: Whether email is verified
          default: false
        uiLocale:
          type: string
          description: User UI locale
          example: en
        outputLocale:
          type: string
          description: User output locale
          example: en
    BaseResponse:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
          description: Whether the operation was successful
          example: true
        errMsg:
          type: string
          description: Error message
          example: Operation failed
    UpsertResourceRequest:
      type: object
      required:
        - resourceType
        - data
      properties:
        resourceType:
          description: Resource type
          $ref: '#/components/schemas/ResourceType'
        title:
          type: string
          description: Resource title
          example: My Resource
        resourceId:
          type: string
          description: Resource ID (only used for update)
          example: r-g30e1b80b5g1itbemc0g5jj3
        collectionId:
          type: string
          description: Collection ID (will create new collection if empty)
          example: cl-g30e1b80b5g1itbemc0g5jj3
        collectionName:
          type: string
          description: Collection name
          example: New Collection
        data:
          description: Resource metadata
          $ref: '#/components/schemas/ResourceMeta'
        storageKey:
          type: string
          description: Storage key for the resource
        content:
          type: string
          description: Resource content (this will be ignored if storageKey was set)
        isPublic:
          type: boolean
          description: Whether this resource is public
          default: false
    UpsertResourceResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/ResourceListItem'
    DeleteResourceRequest:
      type: object
      required:
        - resourceId
      properties:
        resourceId:
          type: string
          description: Resource ID to delete
          example: r-g30e1b80b5g1itbemc0g5jj3
    ListResourceResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Resource list
              items:
                $ref: '#/components/schemas/ResourceListItem'
    GetResourceDetailResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              description: Resource data
              $ref: '#/components/schemas/ResourceDetail'
    UpsertCollectionRequest:
      type: object
      properties:
        collectionId:
          type: string
          description: Collection ID (only used for update)
          example: cl-g30e1b80b5g1itbemc0g5jj3
        title:
          type: string
          description: Collection title
          example: My Collection
        description:
          type: string
          description: Collection description
          example: Collection description
        isPublic:
          type: boolean
          description: Whether this collection is public
          default: false
    UpsertCollectionResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/CollectionListItem'
    DeleteCollectionRequest:
      type: object
      required:
        - collectionId
      properties:
        collectionId:
          type: string
          description: Collection ID to delete
          example: cl-g30e1b80b5g1itbemc0g5jj3
    ListCollectionResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Collection list
              items:
                $ref: '#/components/schemas/CollectionListItem'
    GetCollectionDetailResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              description: Collection data
              $ref: '#/components/schemas/CollectionDetail'
    CreateConversationRequest:
      type: object
      properties:
        title:
          type: string
          description: Conversation title
          example: My Conversation
        contentId:
          type: string
          description: Related content ID
          example: c-g30e1b80b5g1itbemc0g5jj3
        linkId:
          type: string
          description: Related link ID
          example: l-g30e1b80b5g1itbemc0g5jj3
        locale:
          type: string
          description: Conversation locale
          example: en
        origin:
          type: string
          description: Origin page host
          example: https://refly.ai
        originPageTitle:
          type: string
          description: Origin page title
          example: Refly | Where knowledge thrives
        originPageUrl:
          type: string
          description: Origin page url
          example: https://refly.ai/knowledge-base
    CreateConversationResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              description: Created conversation
              $ref: '#/components/schemas/ConversationListItem'
    ListConversationResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Conversation list
              $ref: '#/components/schemas/ConversationListItem'
    GetConversationDetailResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              description: Conversation data
              $ref: '#/components/schemas/ConversationDetail'
    UpdateUserSettingsRequest:
      type: object
      properties:
        uiLocale:
          type: string
          description: UI locale
          example: en
        outputLocale:
          type: string
          description: Output locale
          example: en
    GetUserSettingsResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              description: User settings data
              $ref: '#/components/schemas/UserSettings'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
