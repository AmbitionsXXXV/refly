// This file is auto-generated by @hey-api/openapi-ts

export const $WeblinkMeta = {
  type: 'object',
  description: 'Weblink metadata',
  required: ['url'],
  properties: {
    url: {
      type: 'string',
      description: 'Weblink URL',
      example: 'https://www.google.com',
    },
    title: {
      type: 'string',
      description: 'Weblink title',
      example: 'Google',
    },
    linkId: {
      type: 'string',
      description: 'Weblink ID (if it already exists)',
      example: 'l-g30e1b80b5g1itbemc0g5jj3',
    },
    storageKey: {
      type: 'string',
      description: 'Storage key for the weblink',
      deprecated: true,
    },
  },
} as const;

export const $ResourceMeta = {
  description: 'Resource metadata',
  oneOf: [
    {
      $ref: '#/components/schemas/WeblinkMeta',
    },
  ],
} as const;

export const $ResourceType = {
  type: 'string',
  description: 'Resource type',
  enum: ['weblink'],
} as const;

export const $ResourceListItem = {
  type: 'object',
  required: ['resourceId', 'resourceType', 'isPublic', 'createdAt', 'updatedAt'],
  properties: {
    resourceId: {
      type: 'string',
      description: 'Resource ID',
      example: 'r-g30e1b80b5g1itbemc0g5jj3',
    },
    resourceType: {
      description: 'Resource type',
      $ref: '#/components/schemas/ResourceType',
    },
    data: {
      type: 'object',
      description: 'Resource metadata',
      $ref: '#/components/schemas/ResourceMeta',
    },
    isPublic: {
      type: 'boolean',
      description: 'Whether this resource is public',
      default: false,
    },
    createdAt: {
      type: 'string',
      format: 'date-time',
      description: 'Collection creation time',
    },
    updatedAt: {
      type: 'string',
      format: 'date-time',
      description: 'Collection creation time',
    },
  },
} as const;

export const $CollectionListItem = {
  type: 'object',
  required: ['collectionId', 'title', 'createdAt', 'updatedAt'],
  properties: {
    collectionId: {
      type: 'string',
      description: 'Collection ID',
      example: 'cl-g30e1b80b5g1itbemc0g5jj3',
    },
    title: {
      type: 'string',
      description: 'Collection title',
      example: 'Default Collection',
    },
    description: {
      type: 'string',
      description: 'Collection description',
      example: 'Collection description',
    },
    isPublic: {
      type: 'boolean',
      description: 'Whether this collection is public',
      default: false,
    },
    createdAt: {
      type: 'string',
      format: 'date-time',
      description: 'Collection creation time',
    },
    updatedAt: {
      type: 'string',
      format: 'date-time',
      description: 'Collection creation time',
    },
  },
} as const;

export const $ResourceDetail = {
  allOf: [
    {
      $ref: '#/components/schemas/ResourceListItem',
    },
    {
      type: 'object',
      properties: {
        doc: {
          type: 'string',
          description: 'Document content for this resource',
        },
      },
    },
  ],
} as const;

export const $CollectionDetail = {
  allOf: [
    {
      $ref: '#/components/schemas/CollectionListItem',
    },
    {
      type: 'object',
      properties: {
        resources: {
          type: 'array',
          description: 'Collection resources',
          items: {
            $ref: '#/components/schemas/ResourceListItem',
          },
        },
      },
    },
  ],
} as const;

export const $BaseResponse = {
  type: 'object',
  required: ['success'],
  properties: {
    success: {
      type: 'boolean',
      description: 'Whether the operation was successful',
      example: true,
    },
    errMsg: {
      type: 'string',
      description: 'Error message',
      example: 'Operation failed',
    },
  },
} as const;

export const $UpsertResourceRequest = {
  type: 'object',
  required: ['resourceType', 'data'],
  properties: {
    resourceType: {
      description: 'Resource type',
      $ref: '#/components/schemas/ResourceType',
    },
    title: {
      type: 'string',
      description: 'Resource title',
      example: 'My Resource',
    },
    resourceId: {
      type: 'string',
      description: 'Resource ID (only used for update)',
      example: 'r-g30e1b80b5g1itbemc0g5jj3',
    },
    collectionId: {
      type: 'string',
      description: 'Collection ID (will create new collection if empty)',
      example: 'cl-g30e1b80b5g1itbemc0g5jj3',
    },
    collectionName: {
      type: 'string',
      description: 'Collection name',
      example: 'New Collection',
    },
    data: {
      description: 'Resource metadata',
      $ref: '#/components/schemas/ResourceMeta',
    },
    storageKey: {
      type: 'string',
      description: 'Storage key for the resource',
    },
    content: {
      type: 'string',
      description: 'Resource content (this will be ignored if storageKey was set)',
    },
    isPublic: {
      type: 'boolean',
      description: 'Whether this resource is public',
      default: false,
    },
  },
} as const;

export const $UpsertResourceResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/BaseResponse',
    },
    {
      type: 'object',
      properties: {
        data: {
          $ref: '#/components/schemas/ResourceListItem',
        },
      },
    },
  ],
} as const;

export const $DeleteResourceRequest = {
  type: 'object',
  required: ['resourceId'],
  properties: {
    resourceId: {
      type: 'string',
      description: 'Resource ID to delete',
      example: 'r-g30e1b80b5g1itbemc0g5jj3',
    },
  },
} as const;

export const $ListResourceResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/BaseResponse',
    },
    {
      type: 'object',
      properties: {
        data: {
          type: 'array',
          description: 'Resource list',
          items: {
            $ref: '#/components/schemas/ResourceListItem',
          },
        },
      },
    },
  ],
} as const;

export const $GetResourceDetailResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/BaseResponse',
    },
    {
      type: 'object',
      properties: {
        data: {
          type: 'object',
          description: 'Resource data',
          $ref: '#/components/schemas/ResourceDetail',
        },
      },
    },
  ],
} as const;

export const $UpsertCollectionRequest = {
  type: 'object',
  properties: {
    collectionId: {
      type: 'string',
      description: 'Collection ID (only used for update)',
      example: 'cl-g30e1b80b5g1itbemc0g5jj3',
    },
    title: {
      type: 'string',
      description: 'Collection title',
      example: 'My Collection',
    },
    description: {
      type: 'string',
      description: 'Collection description',
      example: 'Collection description',
    },
    isPublic: {
      type: 'boolean',
      description: 'Whether this collection is public',
      default: false,
    },
  },
} as const;

export const $UpsertCollectionResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/BaseResponse',
    },
    {
      type: 'object',
      properties: {
        data: {
          $ref: '#/components/schemas/CollectionListItem',
        },
      },
    },
  ],
} as const;

export const $DeleteCollectionRequest = {
  type: 'object',
  required: ['collectionId'],
  properties: {
    collectionId: {
      type: 'string',
      description: 'Collection ID to delete',
      example: 'cl-g30e1b80b5g1itbemc0g5jj3',
    },
  },
} as const;

export const $ListCollectionResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/BaseResponse',
    },
    {
      type: 'object',
      properties: {
        data: {
          type: 'array',
          description: 'Collection list',
          items: {
            $ref: '#/components/schemas/CollectionListItem',
          },
        },
      },
    },
  ],
} as const;

export const $GetCollectionDetailResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/BaseResponse',
    },
    {
      type: 'object',
      properties: {
        data: {
          type: 'object',
          description: 'Collection data',
          $ref: '#/components/schemas/CollectionDetail',
        },
      },
    },
  ],
} as const;
