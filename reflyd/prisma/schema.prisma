/// This is your Prisma schema file,
/// learn more about it in the docs: https:///pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String  @map("type")
  provider          String  @map("provider")
  providerAccountId String  @map("provider_account_id")
  refreshToken      String? @map("refresh_token")
  accessToken       String? @map("access_token")
  expiresAt         Int?    @map("expires_at")
  scope             String? @map("scope")

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  @@map("session")
}

//邮箱
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}

model User {
  /// 主键
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  /// 头像
  avatar              String?   @map("avatar")
  /// 用户名
  name                String?   @map("name")
  /// 邮箱
  email               String?   @unique @map("unique")
  /// 邮箱是否已验证
  emailVerified       DateTime?
  /// 密码
  password            String?
  /// 语言偏好列表
  languagePreferences String[]  @default(["English", "Simplified Chinese"])
  /// 当前语言环境
  locale              String    @default("en")
  /// 禁用的功能列表
  disabledCeatures    String[]
  /// 创建时间
  createdAt           DateTime  @default(now())
  /// 更新时间
  updatedAt           DateTime  @updatedAt

  @@map("user")
}

/// (暂不需要) 内容主题
model Topic {
  /// 主键
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  /// 主题 key
  key               String   @map("key")
  /// 多语言名称 JSON 字符串 (key: 语言, val: 名称)
  localeName        String   @map("locale_name")
  /// 多语言描述 JSON 字符串 (key: 语言, val: 名称)
  localeDescription String   @map("locale_description")
  /// 创建时间
  createdAt         DateTime @default(now())
  /// 更新时间
  updatedAt         DateTime @updatedAt

  @@map("topic")
}

/// 用户喜好
model UserPreference {
  /// 主键
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  /// 用户id
  userId    String   @map("user_id") @db.ObjectId
  /// 主题key
  topicKey  String   @map("topic_key")
  /// 兴趣值
  score     Int      @default(0) @map("score")
  /// 创建时间
  createdAt DateTime @default(now())
  /// 更新时间
  updatedAt DateTime @updatedAt

  @@unique([userId, topicKey])
  @@index([topicKey])
  @@map("user_preference")
}

// 会话模型
model Conversation {
  /// id为主键
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  /// 用户id
  userId          String   @map("user_id") @db.ObjectId
  /// 内容 id，指向 aigc_content 中的内容
  contentId       String?  @map("content_id") @db.ObjectId
  /// 会话标题
  title           String   @map("title")
  /// 最后一条聊天记录
  lastMessage     String   @default("") @map("last_message")
  /// 消息数量
  messageCount    Int      @default(0) @map("message_count")
  /// 会话来源 origin
  origin          String   @default("") @map("origin")
  // 会话来源的 url
  originPageUrl   String   @default("") @map("origin_page_url")
  /// 会话来源页面标题
  originPageTitle String   @default("") @map("origin_page_title")
  /// 创建时间
  createdAt       DateTime @default(now()) @map("created_at")
  /// 更新时间
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@index([userId, updatedAt])
  @@map("conversation")
}

/// 对话消息
model ChatMessage {
  /// id为主键
  id                    String      @id @default(auto()) @map("_id") @db.ObjectId
  /// 会话id
  conversationId        String      @map("conversation_id") @db.ObjectId
  /// 消息来源
  type                  MessageType @map("type")
  /// 用户id
  userId                String      @map("user_id") @db.ObjectId
  // 内容
  content               String      @map("content")
  // 引用文档来源，以 JSON 方式存储
  sources               String?     @default("") @map("sources")
  /// 创建时间
  createdAt             DateTime    @default(now())
  /// 更新时间
  updatedAt             DateTime    @updatedAt
  /// 会话选中 Weblink 配置，未来可能会变，先使用 string 保存
  selectedWeblinkConfig String?

  @@index([conversationId])
  @@map("chat_message")
}

/// 用户访问网页记录
model UserWeblink {
  /// id为主键
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  /// 网页链接
  url                   String   @map("url")
  /// 会话来源 origin
  origin                String   @default("")
  /// 用户id
  userId                String   @map("user_id") @db.ObjectId
  // 会话来源的 url
  originPageUrl         String   @default("") @map("origin_page_url")
  /// 会话来源页面标题
  originPageTitle       String   @default("") @map("origin_page_title")
  /// 会话来源页面的描述
  originPageDescription String   @default("") @map("origin_page_description")
  /// 最近访问时间
  lastVisitTime         DateTime @default(now()) @map("last_visit_time")
  /// 访问次数
  visitTimes            Int      @default(0) @map("visit_times")
  /// 总阅读时长（单位秒）
  totalReadTime         Int      @default(0) @map("total_read_time")
  /// 创建时间
  createdAt             DateTime @default(now()) @map("created_at")
  /// 更新时间
  updatedAt             DateTime @updatedAt @map("updated_at")

  @@unique([userId, url])
  @@map("user_weblink")
}

model Weblink {
  /// id为主键
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  /// 网页链接
  url         String      @unique @map("url")
  /// 页面内容
  pageContent String      @map("page_content")
  /// 页面元数据, JSON 存储
  pageMeta    String      @map("page_meta")
  /// 内容元数据, JSON 存储
  contentMeta String      @map("content_meta")
  /// 索引状态
  indexStatus IndexStatus @default(init) @map("index_status")
  /// 创建时间
  createdAt   DateTime    @default(now()) @map("created_at")
  /// 更新时间
  updatedAt   DateTime    @updatedAt @map("updated_at")

  @@map("weblink")
}

/// 网页元数据 (待确定)
model WeblinkMeta {
  /// 主键
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  /// 链接 id
  linkId    String          @map("link_id") @db.ObjectId
  /// 元数据类型
  metaType  ContentMetaType @map("meta_type")
  /// 元数据值
  metaVal   String          @map("meta_val")
  /// 打标分数 (0-100)
  score     Int             @map("score")
  /// 创建时间
  createdAt DateTime        @default(now()) @map("created_at")
  /// 更新时间
  updatedAt DateTime        @updatedAt @map("updated_at")

  @@unique([linkId, metaType, metaVal])
  @@map("weblink_meta")
}

/// 生成内容
model AIGCContent {
  /// 主键
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  /// 标题
  title     String   @map("title")
  /// 内容
  content   String   @map("content")
  /// 元数据, JSON 存储
  meta      String   @map("meta")
  /// 引用文档来源，JSON 字符串
  sources   String?  @default("") @map("sources")
  /// 创建时间
  createdAt DateTime @default(now()) @map("created_at")
  /// 更新时间
  updatedAt DateTime @updatedAt @map("updated_at")

  UserDigest UserDigest?

  @@map("aigc_content")
}

/// 用户推荐内容
model UserFeed {
  /// 主键
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  /// 用户 id
  userId    String   @map("user_id") @db.ObjectId
  /// 内容 id
  contentId String   @map("content_id") @db.ObjectId
  /// 创建时间
  createdAt DateTime @default(now()) @map("created_at")
  /// 更新时间
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([userId, updatedAt])
  @@map("user_feed")
}

/// 用户回顾
model UserDigest {
  /// 主键
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  /// 用户 id
  userId    String   @map("user_id") @db.ObjectId
  /// 日期 (YYYY-MM-DD)
  date      String   @map("date")
  /// 主题
  topicKey  String   @map("topic_key")
  /// 内容 id
  contentId String   @unique @map("content_id") @db.ObjectId
  /// 创建时间
  createdAt DateTime @default(now()) @map("created_at")
  /// 更新时间
  updatedAt DateTime @updatedAt @map("updated_at")

  /// 关联内容
  content AIGCContent @relation(fields: [contentId], references: [id])

  @@unique([userId, date, topicKey])
  @@map("user_digest")
}

enum ContentMetaType {
  topic
  entity
  form
}

enum IndexStatus {
  init
  processing
  finish
}

enum MessageType {
  ai
  human
  system
}
